rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isEmailVerified() {
      return isAuthenticated() && request.auth.token.email_verified == true;
    }

    function isAgeVerified() {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.ageVerified == true &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.age >= 18;
    }

    // Users collection
    match /users/{userId} {
      // Anyone authenticated can read user profiles (for discovery/search)
      allow read: if isAuthenticated();

      // Users can create their own profile during signup
      allow create: if isOwner(userId) &&
        request.resource.data.email == request.auth.token.email &&
        request.resource.data.uid == userId &&
        request.resource.data.role == 'user' && // Cannot set yourself as admin
        request.resource.data.ageVerified == true && // Must be age verified
        request.resource.data.age >= 18 && // Must be 18+
        request.resource.data.emailVerified == false && // Initially false
        request.resource.data.keys().hasAll(['email', 'displayName', 'zipCode', 'dateOfBirth', 'age', 'ageVerified', 'role', 'emailVerified', 'createdAt', 'updatedAt']);

      // Users can update their own profile (but not certain protected fields)
      allow update: if isOwner(userId) &&
        // Protected fields that cannot be changed
        request.resource.data.uid == resource.data.uid &&
        request.resource.data.email == resource.data.email &&
        request.resource.data.role == resource.data.role &&
        request.resource.data.ageVerified == resource.data.ageVerified &&
        request.resource.data.age == resource.data.age &&
        request.resource.data.dateOfBirth == resource.data.dateOfBirth &&
        request.resource.data.createdAt == resource.data.createdAt &&
        // Ensure emailVerified can only go from false to true (via Firebase Auth)
        (request.resource.data.emailVerified == resource.data.emailVerified ||
         (resource.data.emailVerified == false && request.resource.data.emailVerified == true)) &&
        // Profile fields validations (Sprint 2)
        (request.resource.data.displayName is string && request.resource.data.displayName.size() >= 2 && request.resource.data.displayName.size() <= 50) &&
        (request.resource.data.zipCode is string && request.resource.data.zipCode.matches('^[0-9]{5}$')) &&
        (!('bio' in request.resource.data) || (request.resource.data.bio is string && request.resource.data.bio.size() <= 500)) &&
        (!('interests' in request.resource.data) || (request.resource.data.interests is list && request.resource.data.interests.size() >= 3 && request.resource.data.interests.size() <= 20)) &&
        (!('photoURL' in request.resource.data) || request.resource.data.photoURL is string) &&
        // verificationStatus can only be changed by admins (via separate admin function)
        (!('verificationStatus' in request.resource.data) || request.resource.data.verificationStatus == resource.data.verificationStatus);

      // Users can delete their own profile
      allow delete: if isOwner(userId);
    }

    // Verification requests collection (Sprint 2)
    match /verificationRequests/{requestId} {
      // Only admins can read verification requests
      allow read: if isAdmin();

      // Users can create verification requests for themselves
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.status == 'pending' &&
        request.resource.data.keys().hasAll(['userId', 'userEmail', 'userName', 'notes', 'status', 'createdAt']);

      // Only admins can update verification requests (to approve/reject)
      allow update: if isAdmin();

      // Only admins can delete verification requests
      allow delete: if isAdmin();
    }

    // Posts collection (Sprint 2+)
    match /posts/{postId} {
      // Anyone authenticated and age verified can read posts
      allow read: if isAuthenticated() && isAgeVerified();

      // Email verified and age verified users can create posts
      allow create: if isEmailVerified() && isAgeVerified() &&
        request.resource.data.authorId == request.auth.uid &&
        request.resource.data.keys().hasAll(['authorId', 'content', 'createdAt', 'updatedAt']);

      // Post author can update their own posts (not authorId)
      allow update: if isEmailVerified() && isAgeVerified() &&
        resource.data.authorId == request.auth.uid &&
        request.resource.data.authorId == resource.data.authorId;

      // Post author or admin can delete
      allow delete: if isAuthenticated() && isAgeVerified() &&
        (resource.data.authorId == request.auth.uid || isAdmin());

      // Comments subcollection
      match /comments/{commentId} {
        allow read: if isAuthenticated() && isAgeVerified();
        allow create: if isEmailVerified() && isAgeVerified() &&
          request.resource.data.authorId == request.auth.uid;
        allow update: if isEmailVerified() && isAgeVerified() &&
          resource.data.authorId == request.auth.uid &&
          request.resource.data.authorId == resource.data.authorId;
        allow delete: if isAuthenticated() && isAgeVerified() &&
          (resource.data.authorId == request.auth.uid || isAdmin());
      }

      // Reactions subcollection
      match /reactions/{reactionId} {
        allow read: if isAuthenticated() && isAgeVerified();
        allow create: if isEmailVerified() && isAgeVerified() &&
          reactionId == request.auth.uid; // Reaction ID is user ID
        allow delete: if isAuthenticated() && isAgeVerified() &&
          reactionId == request.auth.uid;
      }
    }

    // Conversations collection (Sprint 4)
    match /conversations/{conversationId} {
      // Can read if you're a participant
      allow read: if isAuthenticated() && isAgeVerified() &&
        request.auth.uid in resource.data.participantIds;

      // Can create if you're a participant and email verified
      allow create: if isEmailVerified() && isAgeVerified() &&
        request.auth.uid in request.resource.data.participantIds &&
        request.resource.data.participantIds.size() == 2; // 1-on-1 conversations only

      // Can update if you're a participant (for read receipts, muting, etc.)
      allow update: if isEmailVerified() && isAgeVerified() &&
        request.auth.uid in resource.data.participantIds;
    }

    // Messages collection (Sprint 4)
    match /messages/{messageId} {
      // Can read if you're a participant in the conversation
      allow read: if isAuthenticated() && isAgeVerified() &&
        exists(/databases/$(database)/documents/conversations/$(resource.data.conversationId)) &&
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participantIds;

      // Can create if you're the sender and a participant
      allow create: if isEmailVerified() && isAgeVerified() &&
        request.resource.data.senderId == request.auth.uid &&
        exists(/databases/$(database)/documents/conversations/$(request.resource.data.conversationId)) &&
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(request.resource.data.conversationId)).data.participantIds &&
        request.resource.data.keys().hasAll(['conversationId', 'senderId', 'type', 'content', 'readBy', 'createdAt', 'updatedAt']);

      // Can update if you're a participant (for read receipts)
      allow update: if isAuthenticated() && isAgeVerified() &&
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participantIds;

      // Can delete (soft delete) if you're the sender
      allow update: if isAuthenticated() && isAgeVerified() &&
        resource.data.senderId == request.auth.uid &&
        request.resource.data.deletedAt != null &&
        request.resource.data.deletedBy == request.auth.uid;
    }

    // Reports collection (Sprint 4)
    match /reports/{reportId} {
      // Users can read their own reports
      allow read: if isAuthenticated() && isAgeVerified() &&
        resource.data.reporterId == request.auth.uid;

      // Admins can read all reports
      allow read: if isAdmin();

      // Users can create reports
      allow create: if isEmailVerified() && isAgeVerified() &&
        request.resource.data.reporterId == request.auth.uid &&
        request.resource.data.status == 'pending' &&
        request.resource.data.keys().hasAll(['reporterId', 'reportedUserId', 'type', 'reason', 'description', 'status', 'createdAt', 'updatedAt']);

      // Only admins can update reports (to review/resolve)
      allow update: if isAdmin();
    }

    // Blocked users collection (Sprint 4)
    match /blockedUsers/{blockId} {
      // Users can read their own blocked list
      allow read: if isAuthenticated() && isAgeVerified() &&
        resource.data.blockerId == request.auth.uid;

      // Users can create blocks
      allow create: if isEmailVerified() && isAgeVerified() &&
        request.resource.data.blockerId == request.auth.uid &&
        request.resource.data.keys().hasAll(['blockerId', 'blockedUserId', 'createdAt']);

      // Users can delete their own blocks (unblock)
      allow delete: if isAuthenticated() && isAgeVerified() &&
        resource.data.blockerId == request.auth.uid;
    }

    // Notifications collection (Sprint 3+)
    match /notifications/{notificationId} {
      // Users can only read their own notifications
      allow read: if isAuthenticated() && isAgeVerified() &&
        resource.data.userId == request.auth.uid;

      // Users can update their own notifications (to mark as read)
      allow update: if isAuthenticated() && isAgeVerified() &&
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == resource.data.userId;

      // Users can delete their own notifications
      allow delete: if isAuthenticated() && isAgeVerified() &&
        resource.data.userId == request.auth.uid;
    }

    // Connections collection (Sprint 3)
    match /connections/{connectionId} {
      // Users can read connections they're part of
      allow read: if isAuthenticated() && isAgeVerified() &&
        (resource.data.fromUserId == request.auth.uid ||
         resource.data.toUserId == request.auth.uid);

      // Email verified and age verified users can create connection requests
      allow create: if isEmailVerified() && isAgeVerified() &&
        request.resource.data.fromUserId == request.auth.uid &&
        request.resource.data.status == 'pending' &&
        request.resource.data.keys().hasAll(['fromUserId', 'toUserId', 'status', 'createdAt', 'updatedAt']);

      // Users can update connections they're the recipient of (to accept/decline)
      allow update: if isEmailVerified() && isAgeVerified() &&
        resource.data.toUserId == request.auth.uid &&
        resource.data.fromUserId == request.resource.data.fromUserId &&
        resource.data.toUserId == request.resource.data.toUserId &&
        (request.resource.data.status == 'accepted' || request.resource.data.status == 'declined');

      // Users can delete connections they're part of
      allow delete: if isAuthenticated() && isAgeVerified() &&
        (resource.data.fromUserId == request.auth.uid ||
         resource.data.toUserId == request.auth.uid);
    }

    // Profiles collection (Sprint 2+)
    match /profiles/{profileId} {
      // Anyone authenticated can read public profiles (for search)
      allow read: if isAuthenticated();

      // Users can create their own profile
      allow create: if isOwner(profileId) &&
        request.resource.data.uid == profileId;

      // Users can update their own profile
      allow update: if isOwner(profileId) &&
        request.resource.data.uid == resource.data.uid;

      // Users can delete their own profile
      allow delete: if isOwner(profileId);
    }

    // Events collection (Sprint 5)
    match /events/{eventId} {
      // Anyone authenticated and age verified can read events
      allow read: if isAuthenticated() && isAgeVerified();

      // Email verified and age verified users can create events
      allow create: if isEmailVerified() && isAgeVerified() &&
        request.resource.data.organizerId == request.auth.uid &&
        request.resource.data.title is string && request.resource.data.title.size() >= 3 &&
        request.resource.data.description is string && request.resource.data.description.size() >= 10 &&
        request.resource.data.location is string && request.resource.data.location.size() >= 3 &&
        request.resource.data.zipCode is string && request.resource.data.zipCode.matches('^[0-9]{5}$') &&
        request.resource.data.ageRanges is list && request.resource.data.ageRanges.size() > 0 &&
        request.resource.data.isPublicPlace is bool &&
        request.resource.data.attendeeCount == 0 &&
        request.resource.data.attendeeIds is list && request.resource.data.attendeeIds.size() == 0 &&
        request.resource.data.keys().hasAll(['organizerId', 'title', 'description', 'location', 'zipCode', 'startTime', 'endTime', 'ageRanges', 'attendeeCount', 'attendeeIds', 'status', 'isPublicPlace', 'createdAt', 'updatedAt']);

      // Event organizer can update their own event (not cancelled events)
      allow update: if isEmailVerified() && isAgeVerified() &&
        resource.data.organizerId == request.auth.uid &&
        request.resource.data.organizerId == resource.data.organizerId &&
        (resource.data.status != 'cancelled' || request.resource.data.status == 'cancelled');

      // Users can update attendee list (for RSVP)
      allow update: if isEmailVerified() && isAgeVerified() &&
        request.resource.data.organizerId == resource.data.organizerId &&
        request.resource.data.title == resource.data.title &&
        request.resource.data.description == resource.data.description &&
        request.resource.data.location == resource.data.location &&
        request.resource.data.status == resource.data.status;

      // Event organizer or admin can delete
      allow delete: if isAuthenticated() && isAgeVerified() &&
        (resource.data.organizerId == request.auth.uid || isAdmin());
    }

    // Event comments collection (Sprint 5)
    match /eventComments/{commentId} {
      // Anyone authenticated and age verified can read comments
      allow read: if isAuthenticated() && isAgeVerified();

      // Email verified users can create comments
      allow create: if isEmailVerified() && isAgeVerified() &&
        request.resource.data.authorId == request.auth.uid &&
        request.resource.data.content is string && request.resource.data.content.size() > 0 && request.resource.data.content.size() <= 1000 &&
        request.resource.data.keys().hasAll(['eventId', 'authorId', 'content', 'createdAt', 'updatedAt']);

      // Comment author can update their own comment
      allow update: if isEmailVerified() && isAgeVerified() &&
        resource.data.authorId == request.auth.uid &&
        request.resource.data.authorId == resource.data.authorId;

      // Comment author or admin can delete
      allow delete: if isAuthenticated() && isAgeVerified() &&
        (resource.data.authorId == request.auth.uid || isAdmin());
    }

    // Moderation logs collection (Sprint 7)
    match /moderationLogs/{logId} {
      // Only admins can read moderation logs
      allow read: if isAdmin();

      // Only admins can create moderation logs
      allow create: if isAdmin() &&
        request.resource.data.keys().hasAll(['action', 'performedBy', 'performedByName', 'targetUserId', 'targetUserName', 'timestamp']);

      // No updates or deletes (logs are immutable)
      allow update, delete: if false;
    }

    // Activity logs collection (Sprint 7)
    match /activityLogs/{logId} {
      // Only admins can read activity logs
      allow read: if isAdmin();

      // System can create activity logs
      allow create: if isAuthenticated() &&
        request.resource.data.userId is string &&
        request.resource.data.action is string &&
        request.resource.data.timestamp != null;

      // No updates or deletes
      allow update, delete: if false;
    }

    // Admin can update user status and verification (Sprint 7)
    match /users/{userId} {
      // Admins can update user status fields
      allow update: if isAdmin() &&
        request.resource.data.uid == resource.data.uid &&
        request.resource.data.email == resource.data.email;
    }

    // Default deny all other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
