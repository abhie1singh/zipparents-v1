rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Posts collection
    match /posts/{postId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() &&
                     (resource.data.authorId == request.auth.uid || isAdmin());
      allow delete: if isSignedIn() &&
                     (resource.data.authorId == request.auth.uid || isAdmin());
    }

    // Comments collection
    match /comments/{commentId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() &&
                     (resource.data.authorId == request.auth.uid || isAdmin());
      allow delete: if isSignedIn() &&
                     (resource.data.authorId == request.auth.uid || isAdmin());
    }

    // Groups collection
    match /groups/{groupId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() &&
                     (resource.data.createdBy == request.auth.uid ||
                      request.auth.uid in resource.data.admins);
      allow delete: if isSignedIn() && resource.data.createdBy == request.auth.uid;

      // Group members subcollection
      match /members/{memberId} {
        allow read: if isSignedIn();
        allow write: if isSignedIn() &&
                      (get(/databases/$(database)/documents/groups/$(groupId)).data.createdBy == request.auth.uid ||
                       request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.admins);
      }
    }

    // Messages collection (for direct messages)
    match /messages/{messageId} {
      allow read: if isSignedIn() &&
                   (resource.data.senderId == request.auth.uid ||
                    resource.data.recipientId == request.auth.uid);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.senderId;
      allow update, delete: if isSignedIn() && resource.data.senderId == request.auth.uid;
    }

    // Events collection
    match /events/{eventId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() &&
                     (resource.data.createdBy == request.auth.uid || isAdmin());
      allow delete: if isSignedIn() && resource.data.createdBy == request.auth.uid;

      // Event attendees subcollection
      match /attendees/{userId} {
        allow read: if isSignedIn();
        allow write: if isSignedIn() && isOwner(userId);
      }
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
